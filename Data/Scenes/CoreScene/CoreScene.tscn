[gd_scene load_steps=23 format=3 uid="uid://ubithf5ubebc"]

[ext_resource type="PackedScene" uid="uid://vcns8byu0kqa" path="res://Data/Scenes/CoreScene/Holders.tscn" id="1_78hkp"]
[ext_resource type="Texture2D" uid="uid://7fit1uamlql4" path="res://Data/Sprites/Tilemaps/MainTileMap.png" id="1_sg0qk"]
[ext_resource type="Texture2D" uid="uid://jhiskuol86" path="res://Data/Sprites/Markers/Markers.png" id="2_outi2"]
[ext_resource type="Script" path="res://Data/Scripts/ResourcesScripts/Spawn/SpawnModifierCalculation.cs" id="7_2krpp"]
[ext_resource type="Script" path="res://Data/Scripts/LevelScripts/LevelInfo.cs" id="9_lclkq"]
[ext_resource type="FontFile" uid="uid://cmhu7x37vwbkf" path="res://Data/UI/Fonts/7_dbl.ttf" id="10_3v6ox"]
[ext_resource type="Script" path="res://Data/Scripts/UIScripts/UIManager.cs" id="10_bwtok"]
[ext_resource type="Script" path="res://Data/Scripts/UIScripts/Fader.cs" id="11_lk4uu"]
[ext_resource type="Script" path="res://Data/Scripts/CameraScripts/CameraShake.cs" id="11_qh8oq"]
[ext_resource type="Script" path="res://Data/Scripts/LevelScripts/LevelGenerator.cs" id="12_13kvq"]
[ext_resource type="PackedScene" uid="uid://dt43ky47ci4jg" path="res://Data/Scenes/Card/Card.tscn" id="13_l7glq"]
[ext_resource type="Script" path="res://Data/Scripts/TurnScripts/TurnController.cs" id="14_07t1w"]
[ext_resource type="Script" path="res://Data/Scripts/LevelScripts/LevelModifier.cs" id="14_xe5ua"]
[ext_resource type="Script" path="res://Data/Scripts/CardsScripts/CardHolder.cs" id="15_xnraa"]
[ext_resource type="Script" path="res://Data/Scripts/TileScripts/TileStorage.cs" id="16_si61r"]
[ext_resource type="Script" path="res://Data/Scripts/LevelScripts/ClearHolder.cs" id="18_m7nb1"]

[sub_resource type="Shader" id="Shader_i4r16"]
code = "/*
Shader from Godot Shaders - the free shader library.
godotshaders.com/shader/VHS-and-CRT-monitor-effect

This shader is under CC0 license. Feel free to use, improve and 
change this shader according to your needs and consider sharing 
the modified result to godotshaders.com.
*/

shader_type canvas_item;

//*** IMPORTANT! ***/ 
// - If you are using this shader to affect the node it is applied to set 'overlay' to false (unchecked in the instepctor).
// - If you are using this shader as an overlay, and want the shader to affect the nodes below in the Scene hierarchy,
//   set 'overlay' to true (checked in the inspector).
// On Mac there is potentially a bug causing this to not work properly. If that is the case and you want to use the shader as an overlay
// change all \"overlay ? SCREEN_TEXTURE : TEXTURE\" to only \"SCREEN_TEXTURE\" on lines 129-140, and \"vec2 uv = overlay ? warp(SCREEN_UV) : warp(UV);\"
// to \"vec2 uv = warp(SCREEN_UV);\" on line 98.
uniform bool overlay = false;

uniform sampler2D SCREEN_TEXTURE : hint_screen_texture;

uniform float scanlines_opacity : hint_range(0.0, 1.0) = 0.4;
uniform float scanlines_width : hint_range(0.0, 0.5) = 0.25;
uniform float grille_opacity : hint_range(0.0, 1.0) = 0.3;
uniform vec2 resolution = vec2(640.0, 480.0); // Set the number of rows and columns the texture will be divided in. Scanlines and grille will make a square based on these values

uniform bool pixelate = true; // Fill each square (\"pixel\") with a sampled color, creating a pixel look and a more accurate representation of how a CRT monitor would work.

uniform bool roll = true;
uniform float roll_speed = 8.0; // Positive values are down, negative are up
uniform float roll_size : hint_range(0.0, 100.0) = 15.0;
uniform float roll_variation : hint_range(0.1, 5.0) = 1.8; // This valie is not an exact science. You have to play around with the value to find a look you like. How this works is explained in the code below.
uniform float distort_intensity : hint_range(0.0, 0.2) = 0.05; // The distortion created by the rolling effect.

uniform float noise_opacity : hint_range(0.0, 1.0) = 0.4;
uniform float noise_speed = 5.0; // There is a movement in the noise pattern that can be hard to see first. This sets the speed of that movement.

uniform float static_noise_intensity : hint_range(0.0, 1.0) = 0.06;

uniform float aberration : hint_range(-1.0, 1.0) = 0.03; // Chromatic aberration, a distortion on each color channel.
uniform float brightness = 1.4; // When adding scanline gaps and grille the image can get very dark. Brightness tries to compensate for that.
uniform bool discolor = true; // Add a discolor effect simulating a VHS

uniform float warp_amount :hint_range(0.0, 5.0) = 1.0; // Warp the texture edges simulating the curved glass of a CRT monitor or old TV.
uniform bool clip_warp = false;

uniform float vignette_intensity = 0.4; // Size of the vignette, how far towards the middle it should go.
uniform float vignette_opacity : hint_range(0.0, 1.0) = 0.5;

// Used by the noise functin to generate a pseudo random value between 0.0 and 1.0
vec2 random(vec2 uv){
    uv = vec2( dot(uv, vec2(127.1,311.7) ),
               dot(uv, vec2(269.5,183.3) ) );
    return -1.0 + 2.0 * fract(sin(uv) * 43758.5453123);
}

// Generate a Perlin noise used by the distortion effects
float noise(vec2 uv) {
    vec2 uv_index = floor(uv);
    vec2 uv_fract = fract(uv);

    vec2 blur = smoothstep(0.0, 1.0, uv_fract);

    return mix( mix( dot( random(uv_index + vec2(0.0,0.0) ), uv_fract - vec2(0.0,0.0) ),
                     dot( random(uv_index + vec2(1.0,0.0) ), uv_fract - vec2(1.0,0.0) ), blur.x),
                mix( dot( random(uv_index + vec2(0.0,1.0) ), uv_fract - vec2(0.0,1.0) ),
                     dot( random(uv_index + vec2(1.0,1.0) ), uv_fract - vec2(1.0,1.0) ), blur.x), blur.y) * 0.5 + 0.5;
}

// Takes in the UV and warps the edges, creating the spherized effect
vec2 warp(vec2 uv){
	vec2 delta = uv - 0.5;
	float delta2 = dot(delta.xy, delta.xy);
	float delta4 = delta2 * delta2;
	float delta_offset = delta4 * warp_amount;
	
	return uv + delta * delta_offset;
}

// Adds a black border to hide stretched pixel created by the warp effect
float border (vec2 uv){
	float radius = min(warp_amount, 0.08);
	radius = max(min(min(abs(radius * 2.0), abs(1.0)), abs(1.0)), 1e-5);
	vec2 abs_uv = abs(uv * 2.0 - 1.0) - vec2(1.0, 1.0) + radius;
	float dist = length(max(vec2(0.0), abs_uv)) / radius;
	float square = smoothstep(0.96, 1.0, dist);
	return clamp(1.0 - square, 0.0, 1.0);
}

// Adds a vignette shadow to the edges of the image
float vignette(vec2 uv){
	uv *= 1.0 - uv.xy;
	float vignette = uv.x * uv.y * 15.0;
	return pow(vignette, vignette_intensity * vignette_opacity);
}

void fragment()
{
	vec2 uv = overlay ? warp(SCREEN_UV) : warp(UV); // Warp the uv. uv will be used in most cases instead of UV to keep the warping
	vec2 text_uv = uv;
	vec2 roll_uv = vec2(0.0);
	float time = roll ? TIME : 0.0;
	

	// Pixelate the texture based on the given resolution.
	if (pixelate)
	{
		text_uv = ceil(uv * resolution) / resolution;
	}
	
	// Create the rolling effect. We need roll_line a bit later to make the noise effect.
	// That is why this runs if roll is true OR noise_opacity is over 0.
	float roll_line = 0.0;
	if (roll || noise_opacity > 0.0)
	{
		// Create the areas/lines where the texture will be distorted.
		roll_line = smoothstep(0.3, 0.9, sin(uv.y * roll_size - (time * roll_speed) ) );
		// Create more lines of a different size and apply to the first set of lines. This creates a bit of variation.
		roll_line *= roll_line * smoothstep(0.3, 0.9, sin(uv.y * roll_size * roll_variation - (time * roll_speed * roll_variation) ) );
		// Distort the UV where where the lines are
		roll_uv = vec2(( roll_line * distort_intensity * (1.-UV.x)), 0.0);
	}
	
	vec4 text;
	if (roll)
	{
		// If roll is true distort the texture with roll_uv. The texture is split up into RGB to 
		// make some chromatic aberration. We apply the aberration to the red and green channels accorging to the aberration parameter
		// and intensify it a bit in the roll distortion.
		text.r = texture(SCREEN_TEXTURE, text_uv + roll_uv * 0.8 + vec2(aberration, 0.0) * .1).r;
		text.g = texture(SCREEN_TEXTURE, text_uv + roll_uv * 1.2 - vec2(aberration, 0.0) * .1 ).g;
		text.b = texture(SCREEN_TEXTURE, text_uv + roll_uv).b;
		text.a = 1.0;
	}
	else
	{
		// If roll is false only apply the aberration without any distorion. The aberration values are very small so the .1 is only 
		// to make the slider in the Inspector less sensitive.
		text.r = texture(SCREEN_TEXTURE, text_uv + vec2(aberration, 0.0) * .1).r;
		text.g = texture(SCREEN_TEXTURE, text_uv - vec2(aberration, 0.0) * .1).g;
		text.b = texture(SCREEN_TEXTURE, text_uv).b;
		text.a = 1.0;
	}
	
	float r = text.r;
	float g = text.g;
	float b = text.b;
	
	uv = warp(UV);
	
	// CRT monitors don't have pixels but groups of red, green and blue dots or lines, called grille. We isolate the texture's color channels 
	// and divide it up in 3 offsetted lines to show the red, green and blue colors next to each other, with a small black gap between.
	if (grille_opacity > 0.0){
		
		float g_r = smoothstep(0.85, 0.95, abs(sin(uv.x * (resolution.x * 3.14159265))));
		r = mix(r, r * g_r, grille_opacity);
		
		float g_g = smoothstep(0.85, 0.95, abs(sin(1.05 + uv.x * (resolution.x * 3.14159265))));
		g = mix(g, g * g_g, grille_opacity);
		
		float b_b = smoothstep(0.85, 0.95, abs(sin(2.1 + uv.x * (resolution.x * 3.14159265))));
		b = mix(b, b * b_b, grille_opacity);
		
	}
	
	// Apply the grille to the texture's color channels and apply Brightness. Since the grille and the scanlines (below) make the image very dark you
	// can compensate by increasing the brightness.
	text.r = clamp(r * brightness, 0.0, 1.0);
	text.g = clamp(g * brightness, 0.0, 1.0);
	text.b = clamp(b * brightness, 0.0, 1.0);
	
	// Scanlines are the horizontal lines that make up the image on a CRT monitor. 
	// Here we are actual setting the black gap between each line, which I guess is not the right definition of the word, but you get the idea  
	float scanlines = 0.5;
	if (scanlines_opacity > 0.0)
	{
		// Same technique as above, create lines with sine and applying it to the texture. Smoothstep to allow setting the line size.
		scanlines = smoothstep(scanlines_width, scanlines_width + 0.5, abs(sin(uv.y * (resolution.y * 3.14159265))));
		text.rgb = mix(text.rgb, text.rgb * vec3(scanlines), scanlines_opacity);
	}
	
	// Apply the banded noise.
	if (noise_opacity > 0.0)
	{
		// Generate a noise pattern that is very stretched horizontally, and animate it with noise_speed
		float noise = smoothstep(0.4, 0.5, noise(uv * vec2(2.0, 200.0) + vec2(10.0, (TIME * (noise_speed))) ) );
		
		// We use roll_line (set above) to define how big the noise should be vertically (multiplying cuts off all black parts).
		// We also add in some basic noise with random() to break up the noise pattern above. The noise is sized according to 
		// the resolution value set in the inspector. If you don't like this look you can 
		// change \"ceil(uv * resolution) / resolution\" to only \"uv\" to make it less pixelated. Or multiply resolution with som value
		// greater than 1.0 to make them smaller.
		roll_line *= noise * scanlines * clamp(random((ceil(uv * resolution) / resolution) + vec2(TIME * 0.8, 0.0)).x + 0.8, 0.0, 1.0);
		// Add it to the texture based on noise_opacity
		text.rgb = clamp(mix(text.rgb, text.rgb + roll_line, noise_opacity), vec3(0.0), vec3(1.0));
	}
	
	// Apply static noise by generating it over the whole screen in the same way as above
	if (static_noise_intensity > 0.0)
	{
		text.rgb += clamp(random((ceil(uv * resolution) / resolution) + fract(TIME)).x, 0.0, 1.0) * static_noise_intensity;
	}
	
	// Apply a black border to hide imperfections caused by the warping.
	// Also apply the vignette
	text.rgb *= border(uv);
	text.rgb *= vignette(uv);
	// Hides the black border and make that area transparent. Good if you want to add the the texture on top an image of a TV or monitor.
	if (clip_warp)
	{
		text.a = border(uv);
	}
	
	// Apply discoloration to get a VHS look (lower saturation and higher contrast)
	// You can play with the values below or expose them in the Inspector.
	float saturation = 0.5;
	float contrast = 1.2;
	if (discolor)
	{
		// Saturation
		vec3 greyscale = vec3(text.r + text.g + text.b) / 3.;
		text.rgb = mix(text.rgb, greyscale, saturation);
		
		// Contrast
		float midpoint = pow(0.5, 2.2);
		text.rgb = (text.rgb - vec3(midpoint)) * contrast + midpoint;
	}
	
	COLOR = text;
}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_at4ju"]
shader = SubResource("Shader_i4r16")
shader_parameter/overlay = false
shader_parameter/scanlines_opacity = 0.4
shader_parameter/scanlines_width = 0.25
shader_parameter/grille_opacity = 0.3
shader_parameter/resolution = Vector2(640, 480)
shader_parameter/pixelate = false
shader_parameter/roll = true
shader_parameter/roll_speed = 2.0
shader_parameter/roll_size = 15.0
shader_parameter/roll_variation = 5.0
shader_parameter/distort_intensity = 0.001
shader_parameter/noise_opacity = 0.05
shader_parameter/noise_speed = 5.0
shader_parameter/static_noise_intensity = 0.03
shader_parameter/aberration = 0.00500005
shader_parameter/brightness = 1.4
shader_parameter/discolor = true
shader_parameter/warp_amount = 0.1
shader_parameter/clip_warp = false
shader_parameter/vignette_intensity = 0.4
shader_parameter/vignette_opacity = 0.5

[sub_resource type="TileSetAtlasSource" id="TileSetAtlasSource_a5c43"]
texture = ExtResource("1_sg0qk")
1:1/0 = 0
2:1/0 = 0
3:1/0 = 0
4:1/0 = 0
5:1/0 = 0
9:1/0 = 0
10:1/0 = 0
11:1/0 = 0
12:1/0 = 0
13:1/0 = 0
15:1/0 = 0
16:1/0 = 0
17:1/0 = 0
18:1/0 = 0
19:1/0 = 0
25:1/0 = 0
1:2/0 = 0
2:2/0 = 0
3:2/0 = 0
4:2/0 = 0
5:2/0 = 0
15:2/0 = 0
19:2/0 = 0
25:2/0 = 0
1:3/0 = 0
2:3/0 = 0
3:3/0 = 0
4:3/0 = 0
5:3/0 = 0
9:3/0 = 0
10:3/0 = 0
11:3/0 = 0
12:3/0 = 0
13:3/0 = 0
15:3/0 = 0
19:3/0 = 0
21:3/0 = 0
23:3/0 = 0
25:3/0 = 0
9:4/0 = 0
10:4/0 = 0
11:4/0 = 0
12:4/0 = 0
13:4/0 = 0
15:4/0 = 0
19:4/0 = 0
25:4/0 = 0
1:5/0 = 0
2:5/0 = 0
4:5/0 = 0
5:5/0 = 0
7:5/0 = 0
8:5/0 = 0
15:5/0 = 0
16:5/0 = 0
17:5/0 = 0
18:5/0 = 0
19:5/0 = 0
21:5/0 = 0
23:5/0 = 0
25:5/0 = 0
1:6/0 = 0
2:6/0 = 0
4:6/0 = 0
5:6/0 = 0
7:6/0 = 0
8:6/0 = 0
1:8/0 = 0
2:8/0 = 0
4:8/0 = 0
5:8/0 = 0
1:9/0 = 0
2:9/0 = 0
4:9/0 = 0
5:9/0 = 0
1:11/0 = 0
3:11/0 = 0
5:11/0 = 0
7:11/0 = 0
9:11/0 = 0
10:11/0 = 0
11:11/0 = 0
13:11/0 = 0
14:11/0 = 0
15:11/0 = 0
17:11/0 = 0
18:11/0 = 0
19:11/0 = 0
21:11/0 = 0
1:12/0 = 0
3:12/0 = 0
5:12/0 = 0
7:12/0 = 0
9:12/0 = 0
10:12/0 = 0
11:12/0 = 0
13:12/0 = 0
14:12/0 = 0
15:12/0 = 0
17:12/0 = 0
18:12/0 = 0
19:12/0 = 0
21:12/0 = 0
1:13/0 = 0
3:13/0 = 0
5:13/0 = 0
7:13/0 = 0
9:13/0 = 0
10:13/0 = 0
11:13/0 = 0
13:13/0 = 0
14:13/0 = 0
15:13/0 = 0
17:13/0 = 0
18:13/0 = 0
19:13/0 = 0
21:13/0 = 0
21:14/0 = 0
1:15/0 = 0
3:15/0 = 0

[sub_resource type="TileSet" id="TileSet_ivx7g"]
sources/0 = SubResource("TileSetAtlasSource_a5c43")

[sub_resource type="TileSetAtlasSource" id="TileSetAtlasSource_mcski"]
texture = ExtResource("2_outi2")
1:1/0 = 0
2:1/0 = 0
3:1/0 = 0

[sub_resource type="TileSet" id="TileSet_b4cq1"]
sources/0 = SubResource("TileSetAtlasSource_mcski")

[node name="GameScene" type="Node2D"]

[node name="VHS-Shader" type="ColorRect" parent="."]
z_index = 100
material = SubResource("ShaderMaterial_at4ju")
offset_left = 128.0
offset_top = 240.0
offset_right = 640.0
offset_bottom = 528.0

[node name="TileMap" type="TileMap" parent="."]
tile_set = SubResource("TileSet_ivx7g")
format = 2

[node name="MarkerTileMap" type="TileMap" parent="."]
tile_set = SubResource("TileSet_b4cq1")
format = 2
layer_0/z_index = 10

[node name="Holders" parent="." instance=ExtResource("1_78hkp")]

[node name="Camera2D" type="Camera2D" parent="."]
light_mask = 512
visibility_layer = 512
position = Vector2(384, 384)

[node name="UI" type="Node2D" parent="Camera2D" node_paths=PackedStringArray("HPLabel", "MovePointsLabel", "ActionPointsLabel", "ACLabel")]
position = Vector2(-344, -408)
script = ExtResource("10_bwtok")
HPLabel = NodePath("HPLabel")
MovePointsLabel = NodePath("MovePointsLabel")
ActionPointsLabel = NodePath("ActionPointsLabel")
ACLabel = NodePath("ACLabel")

[node name="HPLabel" type="Label" parent="Camera2D/UI"]
offset_left = 152.0
offset_top = 376.0
offset_right = 1432.0
offset_bottom = 696.0
scale = Vector2(0.05, 0.05)
theme_override_fonts/font = ExtResource("10_3v6ox")
theme_override_font_sizes/font_size = 128
text = "HP:"
metadata/_edit_use_anchors_ = true

[node name="MovePointsLabel" type="Label" parent="Camera2D/UI"]
offset_left = 152.0
offset_top = 424.0
offset_right = 1432.0
offset_bottom = 744.0
scale = Vector2(0.05, 0.05)
theme_override_fonts/font = ExtResource("10_3v6ox")
theme_override_font_sizes/font_size = 128
text = "Move:"
metadata/_edit_use_anchors_ = true

[node name="ActionPointsLabel" type="Label" parent="Camera2D/UI"]
offset_left = 152.0
offset_top = 408.0
offset_right = 1432.0
offset_bottom = 728.0
scale = Vector2(0.05, 0.05)
theme_override_fonts/font = ExtResource("10_3v6ox")
theme_override_font_sizes/font_size = 128
text = "Action:"
metadata/_edit_use_anchors_ = true

[node name="ACLabel" type="Label" parent="Camera2D/UI"]
offset_left = 152.0
offset_top = 392.0
offset_right = 1432.0
offset_bottom = 712.0
scale = Vector2(0.05, 0.05)
theme_override_fonts/font = ExtResource("10_3v6ox")
theme_override_font_sizes/font_size = 128
text = "AC:"
metadata/_edit_use_anchors_ = true

[node name="LevelInfo" type="Node2D" parent="."]
script = ExtResource("9_lclkq")
captain = 2
crystal = 10
tile = 20

[node name="SpawnModifierCalculation" type="Node2D" parent="LevelInfo"]
script = ExtResource("7_2krpp")

[node name="CameraShake" type="Node2D" parent="." node_paths=PackedStringArray("camera")]
script = ExtResource("11_qh8oq")
camera = NodePath("../Camera2D")

[node name="LevelGenerator" type="Node2D" parent="." node_paths=PackedStringArray("tileMap")]
script = ExtResource("12_13kvq")
tileMap = NodePath("../TileMap")

[node name="HolderCleaner" type="Node2D" parent="LevelGenerator"]
script = ExtResource("18_m7nb1")

[node name="ColorRect" type="ColorRect" parent="."]
z_index = -1
offset_left = -3048.0
offset_top = -3088.0
offset_right = 3352.0
offset_bottom = 3312.0
color = Color(0.109804, 0.101961, 0.101961, 1)
script = ExtResource("11_lk4uu")
metadata/_edit_use_anchors_ = true

[node name="TurnController" type="Node2D" parent="."]
script = ExtResource("14_07t1w")

[node name="CardHolder" type="Node2D" parent="."]
script = ExtResource("15_xnraa")

[node name="Card1" parent="CardHolder" instance=ExtResource("13_l7glq")]
visible = false
offset_left = 416.0
offset_top = 320.0
offset_right = 576.0
offset_bottom = 448.0

[node name="Card2" parent="CardHolder" instance=ExtResource("13_l7glq")]
visible = false
offset_left = 192.0
offset_top = 320.0
offset_right = 352.0
offset_bottom = 448.0

[node name="LevelModifier" type="Node2D" parent="."]
script = ExtResource("14_xe5ua")

[node name="TileStorage" type="Node2D" parent="."]
script = ExtResource("16_si61r")
